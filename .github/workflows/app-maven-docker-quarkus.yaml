name: Build Java Maven app into Docker image

on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
        default: ghcr.io
      release:
        required: true
        type: boolean
      version:
        required: true
        type: string
    secrets:
      PACKAGES_RW_ACTOR:
        required: true
      PACKAGES_RW_TOKEN:
        required: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
          fetch-tags: true


      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          java-version: 25
          distribution: "temurin"
          cache: maven
          server-id: github--Forsakringskassan--repository
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN

      - name: Create Maven settings.xml
        run: |
          mkdir -p "$RUNNER_TEMP/maven"
          cat <<'EOF' > "$RUNNER_TEMP/maven/settings.xml"
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
                                        http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github--Forsakringskassan--repository</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Get artifact info
        id: artifact
        run: |
          ARTIFACT_ID=$(./mvnw -s $RUNNER_TEMP/maven/settings.xml help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          echo "name=$ARTIFACT_ID" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Artifact ID: $ARTIFACT_ID"
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_RW_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_RW_TOKEN }}

      - name: Build project
        run: |
          export MAVEN_OPTS="$MAVEN_OPTS -ntp -s $RUNNER_TEMP/maven/settings.xml -T 1C"
          ./mvnw versions:set -DnewVersion=${{ inputs.version }}
          ./mvnw clean package -DskipTests
        env:
          GITHUB_ACTOR: ${{ secrets.PACKAGES_RW_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_RW_TOKEN }}

      - name: Prepare Docker context
        run: |
          mkdir docker
          # Find the quarkus app directory (could be named differently)
          QUARKUS_APP_DIR=$(find target -name "*-app" -type d | head -1)
          if [ -z "$QUARKUS_APP_DIR" ]; then
            echo "No Quarkus app directory found in target/"
            exit 1
          fi
          echo "Found Quarkus app: $QUARKUS_APP_DIR"
          cp "$QUARKUS_APP_DIR" docker/app -r
          # Create Dockerfile for Quarkus app
          cat > docker/Dockerfile <<'EOF'
          FROM eclipse-temurin:25-jre

          ENV LANGUAGE='en_US:en'

          # Copy the Quarkus app
          COPY app/lib/ /deployments/lib/
          COPY app/*.jar /deployments/
          COPY app/app/ /deployments/app/
          COPY app/quarkus/ /deployments/quarkus/

          # Pass version info and image name as build args
          ARG NEXT_VERSION
          ARG GIT_COMMIT
          ARG IMAGE_NAME
          ARG BUILD_DATE
          ENV NEXT_VERSION=$NEXT_VERSION
          ENV GIT_COMMIT=$GIT_COMMIT
          ENV IMAGE_NAME=$IMAGE_NAME
          ENV BUILD_DATE=$BUILD_DATE

          # Print info on container start
          USER 185
          EXPOSE 8080

          # Custom entrypoint that prints info then starts the app
          ENTRYPOINT ["sh", "-c", "echo \"Starting container: $IMAGE_NAME\" && echo \"Version: $NEXT_VERSION\" && echo \"Commit: $GIT_COMMIT\" && echo \"Build date: $BUILD_DATE\" && echo \"\" && echo \"\" && java -jar /deployments/quarkus-run.jar"]
          EOF

      - name: Build Docker image
        run: |
          IMAGE_BASE="${{ inputs.registry }}/forsakringskassan/${{ steps.artifact.outputs.name }}"
          GIT_COMMIT=$(git rev-parse HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          NEXT_VERSION="${{ inputs.version }}"
          if [ "${{ inputs.release }}" = "true" ]; then
            docker build \
              --build-arg NEXT_VERSION=$NEXT_VERSION \
              --build-arg GIT_COMMIT=$GIT_COMMIT \
              --build-arg IMAGE_NAME=$IMAGE_BASE \
              --build-arg BUILD_DATE="$BUILD_DATE" \
              --label "org.opencontainers.image.source=https://github.com/Forsakringskassan/repository" \
              --label "org.opencontainers.image.description=Quarkus application: ${{ steps.artifact.outputs.name }}" \
              --label "org.opencontainers.image.licenses=MIT" \
              -t "$IMAGE_BASE:latest" \
              -t "$IMAGE_BASE:$NEXT_VERSION" \
              docker
          fi
          docker build \
            --build-arg NEXT_VERSION=$NEXT_VERSION \
            --build-arg GIT_COMMIT=$GIT_COMMIT \
            --build-arg IMAGE_NAME=$IMAGE_BASE:snapshot \
            --build-arg BUILD_DATE="$BUILD_DATE" \
            --label "org.opencontainers.image.source=https://github.com/Forsakringskassan/repository" \
            --label "org.opencontainers.image.description=Quarkus application: ${{ steps.artifact.outputs.name }}" \
            --label "org.opencontainers.image.licenses=MIT" \
            -t "$IMAGE_BASE:snapshot" \
            docker
          echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV

      - name: Log in to registry
        run: echo "${{ secrets.PACKAGES_RW_TOKEN }}" | docker login ${{ inputs.registry }} -u ${{ secrets.PACKAGES_RW_ACTOR }} --password-stdin

      - name: Push Docker image(s)
        run: |
          if [ "${{ inputs.release }}" = "true" ]; then
            docker push "$IMAGE_BASE:latest"
            docker push "$IMAGE_BASE:${{ inputs.version }}"
          fi
          docker push "$IMAGE_BASE:snapshot"
        env:
          GH_TOKEN: ${{ secrets.PACKAGES_RW_TOKEN }}
