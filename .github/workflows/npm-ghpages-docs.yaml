name: NPM GH-Pages Docs
concurrency: deploy-${{ github.ref }}

on: [workflow_call]

jobs:
  check-docs-script:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      has-docs-script: ${{ steps.check.outputs.has-docs-script }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24.x
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Check if build:docs script exists
        id: check
        run: |
          if npm run build:docs --dry-run 2>/dev/null; then
            echo "has-docs-script=true" >> $GITHUB_OUTPUT
          else
            echo "has-docs-script=false" >> $GITHUB_OUTPUT
          fi

  docs:
    needs: check-docs-script
    if: needs.check-docs-script.outputs.has-docs-script == 'true'
    name: Deploy
    runs-on: ubuntu-latest
    env:
      DST_REMOTE: origin
      DST_BRANCH: gh-pages
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Configure git
        run: |
          git config --global user.email "sbutvecklinggithub@forsakringskassan.se"
          git config --global user.name "Försäkringskassan"
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24.x
          cache: "npm"
      - name: Determine version
        run: echo "VERSION=v$(npm pkg get version | jq -r)" | tee -a $GITHUB_ENV
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Build documentation
        run: npm run build:docs
      - name: Sanity check
        run: git status && git diff
      - name: Pull pages as subtree
        run: git subtree add --prefix pages ${DST_REMOTE} ${DST_BRANCH}
      - name: Prune latest
        run: |
          if [[ -e pages/latest ]]; then
              git rm -rf pages/latest
          fi
      - name: Prune tagged release
        run: |
          if [[ -e pages/${VERSION} ]]; then
              git rm -rf pages/${VERSION}
          fi
      - name: Create tagged release
        run: |
          rsync -a public/ pages/${VERSION}
          git add -f pages/${VERSION}
      - name: Create version metadata
        run: |
          ls -d pages/v*.*.* | sed "s#pages/##g" | jq -Rn '{ "versions": [inputs] }' | tee pages/versions.json
          git add -f pages/versions.json
      - name: Symlink latest to tagged release
        run: |
          ln -s ${VERSION} pages/latest
          git add -f pages/latest
      - name: Commit changes
        run: |
          git commit \
              --message "chore(release): [skip ci] deploy ${VERSION} documentation" \
              --no-verify \
              --allow-empty
      - name: Push subtree
        run: git subtree push --prefix pages ${DST_REMOTE} ${DST_BRANCH}
